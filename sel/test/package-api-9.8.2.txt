
module Sel where
  secureMain :: forall a. GHC.Types.IO a -> GHC.Types.IO a
  secureMainWithError :: forall a. GHC.Types.IO a -> GHC.Types.IO a -> GHC.Types.IO a

module Sel.HMAC where


module Sel.HMAC.SHA256 where
  type AuthenticationKey :: *
  newtype AuthenticationKey = Sel.HMAC.SHA256.AuthenticationKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type AuthenticationTag :: *
  newtype AuthenticationTag = Sel.HMAC.SHA256.AuthenticationTag (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type role Multipart nominal
  type Multipart :: * -> *
  newtype Multipart s = Sel.HMAC.SHA256.Multipart (GHC.Ptr.Ptr LibSodium.Bindings.SHA2.CryptoAuthHMACSHA256State)
  authenticate :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> AuthenticationKey -> GHC.Types.IO AuthenticationTag
  authenticationKeyFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationKey
  authenticationTagFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationTag
  authenticationTagToBinary :: AuthenticationTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  authenticationTagToHexByteString :: AuthenticationTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  newAuthenticationKey :: GHC.Types.IO AuthenticationKey
  unsafeAuthenticationKeyToBinary :: AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  unsafeAuthenticationKeyToHexByteString :: AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  updateMultipart :: forall s. Multipart s -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO ()
  verify :: AuthenticationTag -> AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.Bool
  withMultipart :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => AuthenticationKey -> (forall s. Multipart s -> m a) -> m AuthenticationTag

module Sel.HMAC.SHA512 where
  type AuthenticationKey :: *
  newtype AuthenticationKey = Sel.HMAC.SHA512.AuthenticationKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type AuthenticationTag :: *
  newtype AuthenticationTag = Sel.HMAC.SHA512.AuthenticationTag (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type role Multipart nominal
  type Multipart :: * -> *
  newtype Multipart s = Sel.HMAC.SHA512.Multipart (GHC.Ptr.Ptr LibSodium.Bindings.SHA2.CryptoAuthHMACSHA512State)
  authenticate :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> AuthenticationKey -> GHC.Types.IO AuthenticationTag
  authenticationKeyFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationKey
  authenticationTagFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationTag
  authenticationTagToBinary :: AuthenticationTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  authenticationTagToHexByteString :: AuthenticationTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  newAuthenticationKey :: GHC.Types.IO AuthenticationKey
  unsafeAuthenticationKeyToBinary :: AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  unsafeAuthenticationKeyToHexByteString :: AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  updateMultipart :: forall s. Multipart s -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO ()
  verify :: AuthenticationTag -> AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.Bool
  withMultipart :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => AuthenticationKey -> (forall s. Multipart s -> m a) -> m AuthenticationTag

module Sel.HMAC.SHA512_256 where
  type AuthenticationKey :: *
  newtype AuthenticationKey = Sel.HMAC.SHA512_256.AuthenticationKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type AuthenticationTag :: *
  newtype AuthenticationTag = Sel.HMAC.SHA512_256.AuthenticationTag (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type role Multipart nominal
  type Multipart :: * -> *
  newtype Multipart s = Sel.HMAC.SHA512_256.Multipart (GHC.Ptr.Ptr LibSodium.Bindings.SHA2.CryptoAuthHMACSHA512256State)
  authenticate :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> AuthenticationKey -> GHC.Types.IO AuthenticationTag
  authenticationKeyFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationKey
  authenticationTagFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationTag
  authenticationTagToBinary :: AuthenticationTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  authenticationTagToHexByteString :: AuthenticationTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  newAuthenticationKey :: GHC.Types.IO AuthenticationKey
  unsafeAuthenticationKeyToBinary :: AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  unsafeAuthenticationKeyToHexByteString :: AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  updateMultipart :: forall s. Multipart s -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO ()
  verify :: AuthenticationTag -> AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.Bool
  withMultipart :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => AuthenticationKey -> (forall s. Multipart s -> m a) -> m AuthenticationTag

module Sel.Hashing where
  type Hash :: *
  newtype Hash = Sel.Hashing.Hash (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type HashKey :: *
  newtype HashKey = Sel.Hashing.HashKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type role Multipart nominal
  type Multipart :: * -> *
  newtype Multipart s = Sel.Hashing.Multipart (GHC.Ptr.Ptr LibSodium.Bindings.GenericHashing.CryptoGenericHashState)
  hashByteString :: GHC.Maybe.Maybe HashKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO Hash
  hashToBinary :: Hash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  hashToHexByteString :: Hash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  hashToHexText :: Hash -> Data.Text.Internal.Text
  newHashKey :: GHC.Types.IO HashKey
  updateMultipart :: forall (m :: * -> *) s. Control.Monad.IO.Class.MonadIO m => Multipart s -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> m ()
  withMultipart :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => GHC.Maybe.Maybe HashKey -> (forall s. Multipart s -> m a) -> m Hash

module Sel.Hashing.Password where
  type Argon2Params :: *
  data Argon2Params = Argon2Params {Sel.Hashing.Password.opsLimit :: Foreign.C.Types.CULLong, Sel.Hashing.Password.memLimit :: Foreign.C.Types.CSize}
  type PasswordHash :: *
  newtype PasswordHash = Sel.Hashing.Password.PasswordHash (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CChar)
  type Salt :: *
  newtype Salt = Sel.Hashing.Password.Salt bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  asciiByteStringToPasswordHash :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> PasswordHash
  asciiTextToPasswordHash :: Data.Text.Internal.Text -> PasswordHash
  binaryToSalt :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Maybe.Maybe Salt
  defaultArgon2Params :: Argon2Params
  genSalt :: GHC.Types.IO Salt
  hashByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO PasswordHash
  hashByteStringWithParams :: Argon2Params -> Salt -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO PasswordHash
  hashText :: Data.Text.Internal.Text -> GHC.Types.IO PasswordHash
  hexByteStringToSalt :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Maybe.Maybe Salt
  hexTextToSalt :: Data.Text.Internal.Text -> GHC.Maybe.Maybe Salt
  passwordHashToByteString :: PasswordHash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  passwordHashToHexByteString :: PasswordHash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  passwordHashToHexText :: PasswordHash -> Data.Text.Internal.Text
  passwordHashToText :: PasswordHash -> Data.Text.Internal.Text
  saltToBinary :: Salt -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  saltToHexByteString :: Salt -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  saltToHexText :: Salt -> Data.Text.Internal.Text
  verifyByteString :: PasswordHash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.Bool
  verifyText :: PasswordHash -> Data.Text.Internal.Text -> GHC.Types.Bool

module Sel.Hashing.SHA256 where
  type Hash :: *
  newtype Hash = Sel.Hashing.SHA256.Hash (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type role Multipart nominal
  type Multipart :: * -> *
  newtype Multipart s = Sel.Hashing.SHA256.Multipart (GHC.Ptr.Ptr LibSodium.Bindings.SHA2.CryptoHashSHA256State)
  hashByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO Hash
  hashText :: Data.Text.Internal.Text -> GHC.Types.IO Hash
  hashToBinary :: Hash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  hashToHexByteString :: Hash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  hashToHexText :: Hash -> Data.Text.Internal.Text
  updateMultipart :: forall s. Multipart s -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO ()
  withMultipart :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => (forall s. Multipart s -> m a) -> m Hash

module Sel.Hashing.SHA512 where
  type Hash :: *
  newtype Hash = Sel.Hashing.SHA512.Hash (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type role Multipart nominal
  type Multipart :: * -> *
  newtype Multipart s = Sel.Hashing.SHA512.Multipart (GHC.Ptr.Ptr LibSodium.Bindings.SHA2.CryptoHashSHA512State)
  hashByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO Hash
  hashText :: Data.Text.Internal.Text -> GHC.Types.IO Hash
  hashToBinary :: Hash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  hashToHexByteString :: Hash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  hashToHexText :: Hash -> Data.Text.Internal.Text
  updateMultipart :: forall s. Multipart s -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO ()
  withMultipart :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => (forall s. Multipart s -> m a) -> m Hash

module Sel.Hashing.Short where
  type ShortHash :: *
  newtype ShortHash = Sel.Hashing.Short.ShortHash (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type ShortHashKey :: *
  newtype ShortHashKey = Sel.Hashing.Short.ShortHashKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type ShortHashingException :: *
  data ShortHashingException = ShortHashingException
  binaryToShortHashKey :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Maybe.Maybe ShortHashKey
  hashByteString :: ShortHashKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO ShortHash
  hashText :: ShortHashKey -> Data.Text.Internal.Text -> GHC.Types.IO ShortHash
  hexByteStringToShortHashKey :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Maybe.Maybe ShortHashKey
  hexTextToShortHashKey :: Data.Text.Internal.Text -> GHC.Maybe.Maybe ShortHashKey
  newKey :: GHC.Types.IO ShortHashKey
  shortHashKeyToBinary :: ShortHashKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  shortHashKeyToHexByteString :: ShortHashKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  shortHashKeyToHexText :: ShortHashKey -> Data.Text.Internal.Text
  shortHashToBinary :: ShortHash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  shortHashToHexByteString :: ShortHash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  shortHashToHexText :: ShortHash -> Data.Text.Internal.Text

module Sel.PublicKey.Cipher where
  type Ciphertext :: *
  data Ciphertext = Ciphertext {messageLength :: Foreign.C.Types.CULLong, ciphertextForeignPtr :: GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar}
  type EncryptionError :: *
  data EncryptionError = EncryptionError
  type KeyPairGenerationException :: *
  data KeyPairGenerationException = KeyPairGenerationException
  type Nonce :: *
  newtype Nonce = Nonce (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type PublicKey :: *
  newtype PublicKey = PublicKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type SecretKey :: *
  newtype SecretKey = SecretKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  ciphertextFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text Ciphertext
  ciphertextToBinary :: Ciphertext -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  ciphertextToHexByteString :: Ciphertext -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  ciphertextToHexText :: Ciphertext -> Data.Text.Internal.Text
  decrypt :: Ciphertext -> PublicKey -> SecretKey -> Nonce -> GHC.Maybe.Maybe bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  encrypt :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> PublicKey -> SecretKey -> GHC.Types.IO (Nonce, Ciphertext)
  keyPairFromHexByteStrings :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text (PublicKey, SecretKey)
  newKeyPair :: GHC.Types.IO (PublicKey, SecretKey)
  nonceFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text Nonce
  nonceToHexByteString :: Nonce -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  publicKeyToHexByteString :: PublicKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  unsafeSecretKeyToHexByteString :: SecretKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString

module Sel.PublicKey.Seal where
  type EncryptionError :: *
  data EncryptionError = Sel.PublicKey.Cipher.EncryptionError
  type KeyPairGenerationException :: *
  data KeyPairGenerationException = Sel.PublicKey.Cipher.KeyPairGenerationException
  type PublicKey :: *
  newtype PublicKey = PublicKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type SecretKey :: *
  newtype SecretKey = SecretKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  newKeyPair :: GHC.Types.IO (PublicKey, SecretKey)
  open :: Sel.PublicKey.Cipher.Ciphertext -> PublicKey -> SecretKey -> GHC.Maybe.Maybe bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  seal :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> PublicKey -> GHC.Types.IO Sel.PublicKey.Cipher.Ciphertext

module Sel.PublicKey.Signature where
  type PublicKey :: *
  newtype PublicKey = Sel.PublicKey.Signature.PublicKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type SecretKey :: *
  newtype SecretKey = Sel.PublicKey.Signature.SecretKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type SignedMessage :: *
  data SignedMessage = Sel.PublicKey.Signature.SignedMessage {Sel.PublicKey.Signature.messageLength :: Foreign.C.Types.CSize, Sel.PublicKey.Signature.messageForeignPtr :: GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar, Sel.PublicKey.Signature.signatureForeignPtr :: GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar}
  generateKeyPair :: GHC.Types.IO (PublicKey, SecretKey)
  getSignature :: SignedMessage -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  mkSignature :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> SignedMessage
  openMessage :: SignedMessage -> PublicKey -> GHC.Maybe.Maybe bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  signMessage :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> SecretKey -> GHC.Types.IO SignedMessage
  unsafeGetMessage :: SignedMessage -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString

module Sel.Scrypt where
  type ScryptHash :: *
  newtype ScryptHash = Sel.Scrypt.ScryptHash (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CChar)
  asciiByteStringToScryptHash :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> ScryptHash
  asciiTextToScryptHash :: Data.Text.Internal.Text -> ScryptHash
  scryptHashPassword :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.IO ScryptHash
  scryptHashToByteString :: ScryptHash -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  scryptHashToText :: ScryptHash -> Data.Text.Internal.Text
  scryptVerifyPassword :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> ScryptHash -> GHC.Types.IO GHC.Types.Bool

module Sel.SecretKey.Authentication where
  type AuthenticationKey :: *
  newtype AuthenticationKey = Sel.SecretKey.Authentication.AuthenticationKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type AuthenticationTag :: *
  newtype AuthenticationTag = Sel.SecretKey.Authentication.AuthenticationTag (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  authenticate :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> AuthenticationKey -> GHC.Types.IO AuthenticationTag
  authenticationKeyFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationKey
  authenticationTagFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text AuthenticationTag
  authenticationTagToHexByteString :: AuthenticationTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  newAuthenticationKey :: GHC.Types.IO AuthenticationKey
  unsafeAuthenticationKeyToHexByteString :: AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  verify :: AuthenticationTag -> AuthenticationKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> GHC.Types.Bool

module Sel.SecretKey.Cipher where
  type Ciphertext :: *
  data Ciphertext = Sel.SecretKey.Cipher.Ciphertext {Sel.SecretKey.Cipher.messageLength :: Foreign.C.Types.CULLong, Sel.SecretKey.Cipher.ciphertextForeignPtr :: GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar}
  type Nonce :: *
  newtype Nonce = Sel.SecretKey.Cipher.Nonce (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type SecretKey :: *
  newtype SecretKey = Sel.SecretKey.Cipher.SecretKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  ciphertextFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text Ciphertext
  ciphertextToBinary :: Ciphertext -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  ciphertextToHexByteString :: Ciphertext -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  ciphertextToHexText :: Ciphertext -> Data.Text.Internal.Text
  decrypt :: Ciphertext -> SecretKey -> Nonce -> GHC.Maybe.Maybe bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  encrypt :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> SecretKey -> GHC.Types.IO (Nonce, Ciphertext)
  newSecretKey :: GHC.Types.IO SecretKey
  nonceFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text Nonce
  nonceToHexByteString :: Nonce -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  secretKeyFromHexByteString :: bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text SecretKey
  unsafeSecretKeyToHexByteString :: SecretKey -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString

module Sel.SecretKey.Stream where
  type Ciphertext :: *
  data Ciphertext = Sel.SecretKey.Stream.Ciphertext {Sel.SecretKey.Stream.messageLength :: Foreign.C.Types.CULLong, Sel.SecretKey.Stream.ciphertextForeignPtr :: GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar}
  type Header :: *
  newtype Header = Sel.SecretKey.Stream.Header (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type MessageTag :: *
  data MessageTag = Message | Final | Push | Rekey
  type role Multipart nominal
  type Multipart :: * -> *
  newtype Multipart s = Sel.SecretKey.Stream.Multipart (GHC.Ptr.Ptr LibSodium.Bindings.SecretStream.CryptoSecretStreamXChaCha20Poly1305State)
  type SecretKey :: *
  newtype SecretKey = Sel.SecretKey.Stream.SecretKey (GHC.ForeignPtr.ForeignPtr Foreign.C.Types.CUChar)
  type StreamDecryptionException :: *
  data StreamDecryptionException = Sel.SecretKey.Stream.StreamDecryptionException
  type StreamEncryptionException :: *
  data StreamEncryptionException = Sel.SecretKey.Stream.StreamEncryptionException
  type StreamInitEncryptionException :: *
  data StreamInitEncryptionException = Sel.SecretKey.Stream.StreamInitEncryptionException
  ciphertextFromHexByteString :: base16-1.0:Data.Base16.Types.Internal.Base16 bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text Ciphertext
  ciphertextToBinary :: Ciphertext -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  ciphertextToHexByteString :: Ciphertext -> base16-1.0:Data.Base16.Types.Internal.Base16 bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  ciphertextToHexText :: Ciphertext -> base16-1.0:Data.Base16.Types.Internal.Base16 Data.Text.Internal.Text
  decryptChunk :: forall (m :: * -> *) s. Control.Monad.IO.Class.MonadIO m => Multipart s -> Ciphertext -> m bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  decryptList :: forall (m :: * -> *). Control.Monad.IO.Class.MonadIO m => SecretKey -> Header -> [Ciphertext] -> m (GHC.Maybe.Maybe [bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString])
  decryptStream :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => SecretKey -> Header -> (forall s. Multipart s -> m a) -> m (GHC.Maybe.Maybe a)
  encryptChunk :: forall (m :: * -> *) s. Control.Monad.IO.Class.MonadIO m => Multipart s -> MessageTag -> bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> m Ciphertext
  encryptList :: forall (m :: * -> *). Control.Monad.IO.Class.MonadIO m => SecretKey -> [bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString] -> m (Header, [Ciphertext])
  encryptStream :: forall a (m :: * -> *). Control.Monad.IO.Class.MonadIO m => SecretKey -> (forall s. Multipart s -> m a) -> m (Header, a)
  headerFromHexByteString :: base16-1.0:Data.Base16.Types.Internal.Base16 bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text Header
  headerToHexByteString :: Header -> base16-1.0:Data.Base16.Types.Internal.Base16 bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString
  newSecretKey :: GHC.Types.IO SecretKey
  secretKeyFromHexByteString :: base16-1.0:Data.Base16.Types.Internal.Base16 bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString -> Data.Either.Either Data.Text.Internal.Text SecretKey
  unsafeSecretKeyToHexByteString :: SecretKey -> base16-1.0:Data.Base16.Types.Internal.Base16 bytestring-0.12.1.0:Data.ByteString.Internal.Type.StrictByteString


-- Instances:
instance Foreign.Storable.Storable Sel.Hashing.Hash -- Defined in ‘Sel.Hashing’
instance Foreign.Storable.Storable Sel.Hashing.SHA256.Hash -- Defined in ‘Sel.Hashing.SHA256’
instance Foreign.Storable.Storable Sel.Hashing.SHA512.Hash -- Defined in ‘Sel.Hashing.SHA512’
instance GHC.Exception.Type.Exception Sel.Hashing.Short.ShortHashingException -- Defined in ‘Sel.Hashing.Short’
instance GHC.Exception.Type.Exception Sel.PublicKey.Cipher.EncryptionError -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Exception.Type.Exception Sel.PublicKey.Cipher.KeyPairGenerationException -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Exception.Type.Exception Sel.SecretKey.Stream.StreamDecryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Exception.Type.Exception Sel.SecretKey.Stream.StreamEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Exception.Type.Exception Sel.SecretKey.Stream.StreamInitEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Generics.Generic Sel.Hashing.Password.PasswordHash -- Defined in ‘Sel.Hashing.Password’
instance GHC.Show.Show Sel.HMAC.SHA256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA256’
instance GHC.Show.Show Sel.HMAC.SHA256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA256’
instance GHC.Show.Show Sel.HMAC.SHA512.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512’
instance GHC.Show.Show Sel.HMAC.SHA512.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512’
instance GHC.Show.Show Sel.HMAC.SHA512_256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512_256’
instance GHC.Show.Show Sel.HMAC.SHA512_256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512_256’
instance GHC.Show.Show Sel.Hashing.Hash -- Defined in ‘Sel.Hashing’
instance GHC.Show.Show Sel.Hashing.Password.PasswordHash -- Defined in ‘Sel.Hashing.Password’
instance GHC.Show.Show Sel.Hashing.Password.Salt -- Defined in ‘Sel.Hashing.Password’
instance GHC.Show.Show Sel.Hashing.SHA256.Hash -- Defined in ‘Sel.Hashing.SHA256’
instance GHC.Show.Show Sel.Hashing.SHA512.Hash -- Defined in ‘Sel.Hashing.SHA512’
instance GHC.Show.Show Sel.Hashing.Short.ShortHash -- Defined in ‘Sel.Hashing.Short’
instance GHC.Show.Show Sel.Hashing.Short.ShortHashKey -- Defined in ‘Sel.Hashing.Short’
instance GHC.Show.Show Sel.Hashing.Short.ShortHashingException -- Defined in ‘Sel.Hashing.Short’
instance GHC.Show.Show Sel.PublicKey.Cipher.Ciphertext -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Show.Show Sel.PublicKey.Cipher.EncryptionError -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Show.Show Sel.PublicKey.Cipher.KeyPairGenerationException -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Show.Show Sel.PublicKey.Cipher.Nonce -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Show.Show Sel.PublicKey.Cipher.PublicKey -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Show.Show Sel.PublicKey.Cipher.SecretKey -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Show.Show Sel.Scrypt.ScryptHash -- Defined in ‘Sel.Scrypt’
instance GHC.Show.Show Sel.SecretKey.Authentication.AuthenticationKey -- Defined in ‘Sel.SecretKey.Authentication’
instance GHC.Show.Show Sel.SecretKey.Authentication.AuthenticationTag -- Defined in ‘Sel.SecretKey.Authentication’
instance GHC.Show.Show Sel.SecretKey.Cipher.Ciphertext -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Show.Show Sel.SecretKey.Cipher.Nonce -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Show.Show Sel.SecretKey.Cipher.SecretKey -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Show.Show Sel.SecretKey.Stream.Ciphertext -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Show.Show Sel.SecretKey.Stream.Header -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Show.Show Sel.SecretKey.Stream.SecretKey -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Show.Show Sel.SecretKey.Stream.StreamDecryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Show.Show Sel.SecretKey.Stream.StreamEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Show.Show Sel.SecretKey.Stream.StreamInitEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Eq Sel.HMAC.SHA256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA256’
instance GHC.Classes.Eq Sel.HMAC.SHA256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA256’
instance GHC.Classes.Eq Sel.HMAC.SHA512.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512’
instance GHC.Classes.Eq Sel.HMAC.SHA512.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512’
instance GHC.Classes.Eq Sel.HMAC.SHA512_256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512_256’
instance GHC.Classes.Eq Sel.HMAC.SHA512_256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512_256’
instance GHC.Classes.Eq Sel.Hashing.Hash -- Defined in ‘Sel.Hashing’
instance GHC.Classes.Eq Sel.Hashing.HashKey -- Defined in ‘Sel.Hashing’
instance GHC.Classes.Eq Sel.Hashing.Password.PasswordHash -- Defined in ‘Sel.Hashing.Password’
instance GHC.Classes.Eq Sel.Hashing.Password.Salt -- Defined in ‘Sel.Hashing.Password’
instance GHC.Classes.Eq Sel.Hashing.SHA256.Hash -- Defined in ‘Sel.Hashing.SHA256’
instance GHC.Classes.Eq Sel.Hashing.SHA512.Hash -- Defined in ‘Sel.Hashing.SHA512’
instance GHC.Classes.Eq Sel.Hashing.Short.ShortHash -- Defined in ‘Sel.Hashing.Short’
instance GHC.Classes.Eq Sel.Hashing.Short.ShortHashKey -- Defined in ‘Sel.Hashing.Short’
instance GHC.Classes.Eq Sel.Hashing.Short.ShortHashingException -- Defined in ‘Sel.Hashing.Short’
instance GHC.Classes.Eq Sel.PublicKey.Cipher.Ciphertext -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Eq Sel.PublicKey.Cipher.EncryptionError -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Eq Sel.PublicKey.Cipher.KeyPairGenerationException -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Eq Sel.PublicKey.Cipher.Nonce -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Eq Sel.PublicKey.Cipher.PublicKey -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Eq Sel.PublicKey.Cipher.SecretKey -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Eq Sel.PublicKey.Signature.PublicKey -- Defined in ‘Sel.PublicKey.Signature’
instance GHC.Classes.Eq Sel.PublicKey.Signature.SecretKey -- Defined in ‘Sel.PublicKey.Signature’
instance GHC.Classes.Eq Sel.PublicKey.Signature.SignedMessage -- Defined in ‘Sel.PublicKey.Signature’
instance GHC.Classes.Eq Sel.Scrypt.ScryptHash -- Defined in ‘Sel.Scrypt’
instance GHC.Classes.Eq Sel.SecretKey.Authentication.AuthenticationKey -- Defined in ‘Sel.SecretKey.Authentication’
instance GHC.Classes.Eq Sel.SecretKey.Authentication.AuthenticationTag -- Defined in ‘Sel.SecretKey.Authentication’
instance GHC.Classes.Eq Sel.SecretKey.Cipher.Ciphertext -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Classes.Eq Sel.SecretKey.Cipher.Nonce -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Classes.Eq Sel.SecretKey.Cipher.SecretKey -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Classes.Eq Sel.SecretKey.Stream.Ciphertext -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Eq Sel.SecretKey.Stream.Header -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Eq Sel.SecretKey.Stream.SecretKey -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Eq Sel.SecretKey.Stream.StreamDecryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Eq Sel.SecretKey.Stream.StreamEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Eq Sel.SecretKey.Stream.StreamInitEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Ord Sel.HMAC.SHA256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA256’
instance GHC.Classes.Ord Sel.HMAC.SHA256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA256’
instance GHC.Classes.Ord Sel.HMAC.SHA512.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512’
instance GHC.Classes.Ord Sel.HMAC.SHA512.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512’
instance GHC.Classes.Ord Sel.HMAC.SHA512_256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512_256’
instance GHC.Classes.Ord Sel.HMAC.SHA512_256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512_256’
instance GHC.Classes.Ord Sel.Hashing.Hash -- Defined in ‘Sel.Hashing’
instance GHC.Classes.Ord Sel.Hashing.HashKey -- Defined in ‘Sel.Hashing’
instance GHC.Classes.Ord Sel.Hashing.Password.PasswordHash -- Defined in ‘Sel.Hashing.Password’
instance GHC.Classes.Ord Sel.Hashing.Password.Salt -- Defined in ‘Sel.Hashing.Password’
instance GHC.Classes.Ord Sel.Hashing.SHA256.Hash -- Defined in ‘Sel.Hashing.SHA256’
instance GHC.Classes.Ord Sel.Hashing.SHA512.Hash -- Defined in ‘Sel.Hashing.SHA512’
instance GHC.Classes.Ord Sel.Hashing.Short.ShortHash -- Defined in ‘Sel.Hashing.Short’
instance GHC.Classes.Ord Sel.Hashing.Short.ShortHashKey -- Defined in ‘Sel.Hashing.Short’
instance GHC.Classes.Ord Sel.Hashing.Short.ShortHashingException -- Defined in ‘Sel.Hashing.Short’
instance GHC.Classes.Ord Sel.PublicKey.Cipher.Ciphertext -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Ord Sel.PublicKey.Cipher.EncryptionError -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Ord Sel.PublicKey.Cipher.KeyPairGenerationException -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Ord Sel.PublicKey.Cipher.Nonce -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Ord Sel.PublicKey.Cipher.PublicKey -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Ord Sel.PublicKey.Cipher.SecretKey -- Defined in ‘Sel.PublicKey.Cipher’
instance GHC.Classes.Ord Sel.PublicKey.Signature.PublicKey -- Defined in ‘Sel.PublicKey.Signature’
instance GHC.Classes.Ord Sel.PublicKey.Signature.SecretKey -- Defined in ‘Sel.PublicKey.Signature’
instance GHC.Classes.Ord Sel.PublicKey.Signature.SignedMessage -- Defined in ‘Sel.PublicKey.Signature’
instance GHC.Classes.Ord Sel.Scrypt.ScryptHash -- Defined in ‘Sel.Scrypt’
instance GHC.Classes.Ord Sel.SecretKey.Authentication.AuthenticationKey -- Defined in ‘Sel.SecretKey.Authentication’
instance GHC.Classes.Ord Sel.SecretKey.Authentication.AuthenticationTag -- Defined in ‘Sel.SecretKey.Authentication’
instance GHC.Classes.Ord Sel.SecretKey.Cipher.Ciphertext -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Classes.Ord Sel.SecretKey.Cipher.Nonce -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Classes.Ord Sel.SecretKey.Cipher.SecretKey -- Defined in ‘Sel.SecretKey.Cipher’
instance GHC.Classes.Ord Sel.SecretKey.Stream.Ciphertext -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Ord Sel.SecretKey.Stream.Header -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Ord Sel.SecretKey.Stream.SecretKey -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Ord Sel.SecretKey.Stream.StreamDecryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Ord Sel.SecretKey.Stream.StreamEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance GHC.Classes.Ord Sel.SecretKey.Stream.StreamInitEncryptionException -- Defined in ‘Sel.SecretKey.Stream’
instance Data.Text.Display.Core.Display Sel.HMAC.SHA256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA256’
instance Data.Text.Display.Core.Display Sel.HMAC.SHA256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA256’
instance Data.Text.Display.Core.Display Sel.HMAC.SHA512.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512’
instance Data.Text.Display.Core.Display Sel.HMAC.SHA512.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512’
instance Data.Text.Display.Core.Display Sel.HMAC.SHA512_256.AuthenticationKey -- Defined in ‘Sel.HMAC.SHA512_256’
instance Data.Text.Display.Core.Display Sel.HMAC.SHA512_256.AuthenticationTag -- Defined in ‘Sel.HMAC.SHA512_256’
instance Data.Text.Display.Core.Display Sel.Hashing.Hash -- Defined in ‘Sel.Hashing’
instance Data.Text.Display.Core.Display Sel.Hashing.Password.PasswordHash -- Defined in ‘Sel.Hashing.Password’
instance Data.Text.Display.Core.Display Sel.Hashing.Password.Salt -- Defined in ‘Sel.Hashing.Password’
instance Data.Text.Display.Core.Display Sel.Hashing.SHA256.Hash -- Defined in ‘Sel.Hashing.SHA256’
instance Data.Text.Display.Core.Display Sel.Hashing.SHA512.Hash -- Defined in ‘Sel.Hashing.SHA512’
instance Data.Text.Display.Core.Display Sel.Hashing.Short.ShortHash -- Defined in ‘Sel.Hashing.Short’
instance Data.Text.Display.Core.Display Sel.Hashing.Short.ShortHashKey -- Defined in ‘Sel.Hashing.Short’
instance Data.Text.Display.Core.Display Sel.Hashing.Short.ShortHashingException -- Defined in ‘Sel.Hashing.Short’
instance Data.Text.Display.Core.Display Sel.PublicKey.Cipher.Ciphertext -- Defined in ‘Sel.PublicKey.Cipher’
instance Data.Text.Display.Core.Display Sel.PublicKey.Cipher.Nonce -- Defined in ‘Sel.PublicKey.Cipher’
instance Data.Text.Display.Core.Display Sel.PublicKey.Cipher.PublicKey -- Defined in ‘Sel.PublicKey.Cipher’
instance Data.Text.Display.Core.Display Sel.PublicKey.Cipher.SecretKey -- Defined in ‘Sel.PublicKey.Cipher’
instance Data.Text.Display.Core.Display Sel.Scrypt.ScryptHash -- Defined in ‘Sel.Scrypt’
instance Data.Text.Display.Core.Display Sel.SecretKey.Authentication.AuthenticationKey -- Defined in ‘Sel.SecretKey.Authentication’
instance Data.Text.Display.Core.Display Sel.SecretKey.Authentication.AuthenticationTag -- Defined in ‘Sel.SecretKey.Authentication’
instance Data.Text.Display.Core.Display Sel.SecretKey.Cipher.Ciphertext -- Defined in ‘Sel.SecretKey.Cipher’
instance Data.Text.Display.Core.Display Sel.SecretKey.Cipher.Nonce -- Defined in ‘Sel.SecretKey.Cipher’
instance Data.Text.Display.Core.Display Sel.SecretKey.Cipher.SecretKey -- Defined in ‘Sel.SecretKey.Cipher’
instance Data.Text.Display.Core.Display Sel.SecretKey.Stream.Ciphertext -- Defined in ‘Sel.SecretKey.Stream’
instance Data.Text.Display.Core.Display Sel.SecretKey.Stream.Header -- Defined in ‘Sel.SecretKey.Stream’
instance Data.Text.Display.Core.Display Sel.SecretKey.Stream.SecretKey -- Defined in ‘Sel.SecretKey.Stream’
